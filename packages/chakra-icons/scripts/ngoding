#!/usr/bin/env node
/**
  * This tools start with
  * - read `icon.yml`
  * - clone repository that defined from `icon.yml`
  * - generate all of `svg` after clone repository
  * - publish to npm on one packages called `chakra-icons`
  * - done
  */
"use strict";
const promisify = require('util').promisify
const fs = require('fs/promises');
const fsExist = promisify(require('fs').exists)
const path = require('path');
const yaml = require('js-yaml');
const gittar = require('@ri7nz/gittar');
const create = require('create-chakra-icons/cli').main;
const glob = promisify(require('glob').glob)
const pascalCase = require('change-case').pascalCase
const ora = require('ora')
/**
  * @typedef {Object} ResultIcon
  * @property {string} input
  * @property {string} output
  * @property {string} name
  */
/**
 * @typedef {Object} Icon
 * @property {string} name
 * @property {string} repository
 * @property {string} svgPath
 * @property {string?} tarPath
 * @property {string?} untarPath
 * @property {ResultIcon?} result
 * @property {Object?} exports
 */

/**
 * @param {Icon} icon
 * @return {Promise<Icon>}
 */
const fetchRepository = async (/** @type Icon */ icon) => {
  const tarPath = await gittar.fetch(icon.repository)
  const untarPath = path.join('data', icon.name)
  await gittar.extract(tarPath, untarPath)
  return {
    ...icon,
    tarPath,
    untarPath
  }
}
/**
  * @param {Promise<Icon>} Icon
  * @return {Promise<Icon>} 
  */
const createIcons = async (icon) => {
  icon = await icon
  const input = path.join("data", icon.name, icon.svgPath)
  const inputs = await glob(`${input}/**/*.svg`)

  /** @type ResultIcon[] */
  const result = inputs.reduce(async (acc, i) => {
    acc = await acc
    const [fname] = path.basename(i).split('.')
    const n = pascalCase(fname)

    const basepath = i.split('/').slice(0, -1).join('/').replace('data', 'dist').replace(icon.svgPath, '')

    await fs.mkdir(basepath, { recursive: true })

    const o = path.join(basepath, `${n}.js`)

    create({
      n,
      i,
      o
    })

    return [...acc, {
      input: i,
      output: o,
    }]
  }, [])


  return { ...icon, result: await result }
}
/**
  * @param {Promise<Icon>} Icon
  * @return {Promise<Icon>} 
  */
const createIndex = async (icon) => {
  icon = await icon

  const sourceDirs = icon.result.reduce((a, b) => {
    const item = path.basename(path.resolve(b.output))
    b = path.join(b.output.split('/').slice(0, -1).join('/'), `index.js`)
    const indexJS = a.find(c => c.index === b)
    if (!indexJS) {
      a.push({
        index: b,
        items: [item]
      })
    }
    else {
      const index = a.indexOf(indexJS)
      a[index] = { ...a[index], items: [...a[index].items, item] }
    }
    return a
  }, [])


  const toExportDeclaration = i => `export * from './${i}'`

  sourceDirs.forEach(async (i) => {
    await fs.writeFile(i.index, i.items.map(toExportDeclaration).join("\r\n"))
  })

  const distPackageJson = path.join("dist", "package.json")

  const pkgJson = JSON.parse(
    await fs.readFile(
      await fsExist(distPackageJson) ? distPackageJson :
        "package.production.json"),
    { encoding: "UTF-8" }
  )

  const exports = {
    ...pkgJson.exports, ...sourceDirs.reduce((a, i) => {
      const api = `./${i.index.split("/").slice(1, -1).join('/')}`
      const entry = i.index.replace("dist", ".")
      a[api] = entry
      return a
    }, {})
  }


  await fs.writeFile(distPackageJson, JSON.stringify({ ...pkgJson, exports }))

  return { ...icon, exports }
}

async function run() {
  /** @type IconYML */
  const { icons = [] } = yaml.load(await fs.readFile(path.resolve('icons.yml')));

  const tasks = icons
    .map((/** @type Icon */icon) => fetchRepository(icon))
    .map((/** @type Promise<Icon> */icon) => createIcons(icon))
    .map((/** @type Promise<Icon> */icon) => createIndex(icon))

  return Promise.all(tasks)
}

const spinner = ora()
spinner.start("Start generate packages `chakra-icons` ⚡️")

run().then((/** @type Icon[] */ result) => {
  const n = result.reduce((a, b) => a + b.result.length, 0)
  const exported = Object.keys(result[result.length - 1].exports).length
  spinner.succeed(`Completed: 
Generate chakra-icons from ${n} files
With ${exported} modules exported
See details in ( \`dist\`)`
  )
})
